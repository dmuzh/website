import React, { useCallback, useEffect, useState } from "react";
import Head from "next/head";
import Link from "next/link";
import axiosClient from "@/libraries/axiosClient";
import Image from "next/image";
import Header from "@/layouts/Header";
import Footer from "@/layouts/Footer";
import { useRouter } from "next/router";

function ProductSearch({ products, productsOfCategoryShop }) {
  //search
  const [searchResults, setSearchResults] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();
  const { keyword } = router.query;

  useEffect(() => {
    if (keyword) {
      // Fetch the products with the specified keyword from the API
      axiosClient
        .get(`/user/products/search?keyword=${encodeURIComponent(keyword)}`)
        .then((response) => {
          setSearchResults(response.data.payload);
          setIsLoading(false);
        })
        .catch((error) => {
          console.error('Error fetching search results:', error);
          setIsLoading(false);
        });
    } else {
      // If no keyword is specified, set search results to empty array
      setSearchResults([]);
      setIsLoading(false);
    }
  }, [keyword]);
// end search
  const [currentPage, setCurrentPage] = useState(1);
  const productsPerPage = 9; // Số sản phẩm hiển thị trên mỗi trang

  const [searchKeyword, setSearchKeyword] = useState("");

  const [checkedCategories, setCheckedCategories] = useState({});

  const handleCategoryChange = (categoryId) => {
    setCheckedCategories((prevState) => ({
      ...prevState,
      [categoryId]: !prevState[categoryId],
    }));
  };


  // Tính toán chỉ mục sản phẩm bắt đầu và kết thúc trên trang hiện tại
  const indexOfLastProduct = currentPage * productsPerPage;
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;

  // Lọc sản phẩm theo từ khóa tìm kiếm
  const filteredProducts = products.filter((p) =>
    p.name.toLowerCase().includes(searchKeyword.toLowerCase())
  );


  const currentProducts = filteredProducts.slice(indexOfFirstProduct, indexOfLastProduct);

  // Chuyển đến trang tiếp theo
  const nextPage = () => {
    setCurrentPage(currentPage + 1);
  };

  // Quay lại trang trước
  const prevPage = () => {
    setCurrentPage(currentPage - 1);
  };

  // Xử lý sự kiện tìm kiếm
  const handleSearch = (event) => {
    setSearchKeyword(event.target.value);
    setCurrentPage(1); // Quay về trang đầu tiên khi tìm kiếm
  };

  // const handleSearch = (event) => {
  //   event.preventDefault();
  //   router.push(`/shop?keyword=${encodeURIComponent(searchKeyword)}`);
  // };

  return (
    <>
      <Head>
        <title>Hello</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      
      
      <div className="container-fluid bg-secondary mb-5">
        <div
          className="d-flex flex-column align-items-center justify-content-center"
          style={{ minHeight: 300 }}
        >
          <h1 className="font-weight-semi-bold text-uppercase mb-3">
            Our Shop
          </h1>
          <div className="d-inline-flex">
            <p className="m-0">
              <a href="">Home</a>
            </p>
            <p className="m-0 px-2">-</p>
            <p className="m-0">Shop</p>
          </div>
        </div>
      </div>
      <div className="container-fluid pt-5">
        <div className="row px-xl-5">
          {/* Shop Sidebar Start */}
          <div className="col-lg-3 col-md-12">
            {/* Category start */}
            <div className="border-bottom mb-4 pb-4">
              <h5 className="font-weight-semi-bold mb-4">Filter by Category</h5>
              <form>
              
                {productsOfCategoryShop.map((cate) => (
                    <div
                    className="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3"
                    style={{ fontSize: "17px" }}
                    key={cate.name}
                  >
                    <input
                      type="checkbox"
                      className="custom-control-input"
                      checked={checkedCategories[cate.name]}
                      onChange={() => handleCategoryChange(cate.name)}
                      id={`category-${cate.name}`}
                    />
                    <label
                      className="custom-control-label"
                      htmlFor={`category-${cate.name}`}
                    >
                      {cate.name}
                    </label>
                      <span className="badge font-weight-normal">
                        {cate.totalProduct}
                      </span>
                    </div>
                ))}
                
              </form>
            </div>
          </div>
          {/* Shop Sidebar End */}
          {/* Shop Product Start */}
          <div className="col-lg-9 col-md-12">
            <div className="row pb-3">
              {/* {currentProducts.map((p) => (
                <div className="col-lg-4 col-md-6 col-sm-12 pb-1">
                  <Link
                    // style={{ height: "80px" }}
                    key={p._id}
                    href={`/products/${p._id}`}
                  >
                    <div className="card product-item border-0 mb-4">
                      <div className="card-header product-img position-relative overflow-hidden bg-transparent border p-0">
                        <img className="img-fluid w-100" src={p.cover} alt="" />
                        <span className="discount-label">{p.discount} %</span>
                      </div>
                      <div className="card-body border-left border-right text-center p-0 pt-4 pb-3">
                        <h6 className="text-truncate mb-3">{p.name}</h6>
                        <div className="d-flex justify-content-center">
                          <h6>${p.discountedPrice}</h6>
                          <h6 className="text-muted ml-2">
                            <del style={{ color: "#EF7A59" }}>${p.price}</del>
                          </h6>
                        </div>
                      </div>
                      <div className="card-footer d-flex justify-content-between bg-light border">
                        <div href="" className="btn btn-sm text-dark p-0">
                          <i className="fas fa-eye text-primary mr-1" />
                          View Detail
                        </div>
                        <div href="" className="btn btn-sm text-dark p-0">
                          <i className="fas fa-shopping-cart text-primary mr-1" />
                          Add To Cart
                        </div>
                      </div>
                    </div>
                  </Link>
                </div>
              ))} */}
{isLoading ? (
            <p>Loading...</p>
          ) : (
            searchResults.length === 0 ? (
              <p>No products found.</p>
            ) : (
              searchResults.map((product) => (
                <div key={product._id} className="col-lg-4 col-md-6 col-sm-12 pb-1">
                  <Link href={`/products/${product._id}`}>
                    <div className="card product-item border-0 mb-4">
                      {/* Hiển thị thông tin sản phẩm */}
                      <div className="card-header product-img position-relative overflow-hidden bg-transparent border p-0">
                        <img className="img-fluid w-100" src={product.cover} alt="" />
                        <span className="discount-label">{product.discount} %</span>
                      </div>
                      <div className="card-body border-left border-right text-center p-0 pt-4 pb-3">
                        <h6 className="text-truncate mb-3">{product.name}</h6>
                        <div className="d-flex justify-content-center">
                          <h6>${product.discountedPrice}</h6>
                          <h6 className="text-muted ml-2">
                            <del style={{ color: '#EF7A59' }}>${product.price}</del>
                          </h6>
                        </div>
                      </div>
                      <div className="card-footer d-flex justify-content-between bg-light border">
                        <div href="" className="btn btn-sm text-dark p-0">
                          <i className="fas fa-eye text-primary mr-1" />
                          View Detail
                        </div>
                        <div href="" className="btn btn-sm text-dark p-0">
                          <i className="fas fa-shopping-cart text-primary mr-1" />
                          Add To Cart
                        </div>
                      </div>
                    </div>
                  </Link>
                </div>
              ))
            )
          )}
              <div className="col-12 pb-1">
                <nav aria-label="Page navigation">
                  <ul className="pagination justify-content-center mb-3">
                    {/* Nút trang trước */}
                    <li
                      className={`page-item ${currentPage === 1 ? "disabled" : ""
                        }`}
                    >
                      <a
                        className="page-link"
                        href="#"
                        aria-label="Previous"
                        onClick={prevPage}
                      >
                        <span aria-hidden="true">«</span>
                        <span className="sr-only">Previous</span>
                      </a>
                    </li>
                    {/* Hiển thị các nút trang */}
                    {Array.from({
                      length: Math.ceil(products.length / productsPerPage),
                    }).map((_, index) => (
                      <li
                        className={`page-item ${index + 1 === currentPage ? "active" : ""
                          }`}
                        key={index}
                      >
                        <a
                          className="page-link"
                          href="#"
                          onClick={() => setCurrentPage(index + 1)}
                        >
                          {index + 1}
                        </a>
                      </li>
                    ))}
                    {/* Nút trang tiếp theo */}
                    <li
                      className={`page-item ${currentPage ===
                        Math.ceil(products.length / productsPerPage)
                        ? "disabled"
                        : ""
                        }`}
                    >
                      <a
                        className="page-link"
                        href="#"
                        aria-label="Next"
                        onClick={nextPage}
                      >
                        <span aria-hidden="true">»</span>
                        <span className="sr-only">Next</span>
                      </a>
                    </li>
                  </ul>
                </nav>
              </div>
            </div>
          </div>
          {/* Shop Product End */}
        </div>
      </div>

      <Footer />
    </>
  );
}

export default ProductSearch;

// getServerSideProps - Server-Side Rendering
export async function getServerSideProps() {
  try {
    // const { categoryId, priceStart, priceEnd } = req.query;
    const response = await axiosClient.get("/user/products");
    const response1 = await axiosClient.get(
      "/questions/productsofcategoryshop"
    );
    // const response1 = await axiosClient.get(
    //   // `/user/products/search/?categoryId=${categoryId.id}`
    //   `/user/products/search/`
    // );

    return {
      props: {
        products: response.data.payload,
        productsOfCategoryShop: response1.data.payload,
      },

      // revalidate: 24 * 60 * 60,
    };
  } catch (error) {
    return {
      notFound: true,
    };
  }
}


